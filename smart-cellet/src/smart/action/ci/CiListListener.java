package smart.action.ci;import java.nio.charset.Charset;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeoutException;import net.cellcloud.common.Logger;import net.cellcloud.core.Cellet;import net.cellcloud.talk.dialect.ActionDialect;import net.cellcloud.util.ObjectProperty;import net.cellcloud.util.Properties;import org.eclipse.jetty.client.api.ContentResponse;import org.eclipse.jetty.client.api.Request;import org.eclipse.jetty.http.HttpMethod;import org.eclipse.jetty.http.HttpStatus;import org.json.JSONException;import org.json.JSONObject;import smart.action.AbstractListener;import smart.api.API;import smart.mast.action.Action;/** * @ClassName   : CiListListener * @Description : * @author      : dwg* @date        : Sep 18, 2013 7:31:41 PM *  */public final class CiListListener extends AbstractListener {	public CiListListener(Cellet cellet) {		super(cellet);	}	@Override	public void onAction(ActionDialect action) {		Logger.w(CiListListener.class,this.getHost() );		// URL		StringBuilder url = new StringBuilder(API.CILIST);				// 获取请求参数		JSONObject json;		int currentIndex =0;		int pageSize=15;				try {			json = new JSONObject(action.getParamAsString("data"));			currentIndex = json.getInt("currentIndex");			pageSize = json.getInt("pageSize");		} catch (JSONException e) {			e.printStackTrace();		}		url.append("&currentIndex=").append(currentIndex);		url.append("&pageSize=").append(pageSize);				System.out.println("url of request ci list is:"+url.toString());		// 创建请求		Request request = this.getHttpClient().newRequest(url.toString());		request.method(HttpMethod.GET);		Properties params = new Properties();		// 发送请求		ContentResponse response = null;		try {			response = request.send();		} catch (InterruptedException e1) {			e1.printStackTrace();		} catch (TimeoutException e1) {			e1.printStackTrace();		} catch (ExecutionException e1) {			e1.printStackTrace();		}		JSONObject jo = null;				switch (response.getStatus()) {		case HttpStatus.OK_200:			byte[] bytes = response.getContent();			if (null != bytes) {				// 获取从 Web 服务器上返回的数据				String content = new String(bytes, Charset.forName("UTF-8"));				try {					jo = new JSONObject(content);					System.out.println("json of ci list is:"+jo);					// 设置参数					params.addProperty(new ObjectProperty("data", jo));					// 响应动作，即向客户端发送 ActionDialect					this.response(Action.CILIST, params);				} catch (JSONException e) {					e.printStackTrace();				}			} else {				this.reportHTTPError(Action.CILIST);			}			break;		default:			Logger.w(CiListListener.class,					"返回响应码：" + response.getStatus());			jo = new JSONObject();			try {				jo.put("status", 900);			} catch (JSONException e) {				e.printStackTrace();			}			// 设置参数			params.addProperty(new ObjectProperty("data", jo));			// 响应动作，即向客户端发送 ActionDialect			this.response(Action.CILIST, params);			break;		}	}}